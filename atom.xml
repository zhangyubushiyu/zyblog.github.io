<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>章鱼不是鱼</title>
  <subtitle>前往前端路途中！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zyblog.info/"/>
  <updated>2016-09-09T07:11:18.000Z</updated>
  <id>http://www.zyblog.info/</id>
  
  <author>
    <name>章鱼不是鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原生javascript实现鼠标拖拽移动元素</title>
    <link href="http://www.zyblog.info/2016/09/09/js/"/>
    <id>http://www.zyblog.info/2016/09/09/js/</id>
    <published>2016-09-09T05:33:24.000Z</published>
    <updated>2016-09-09T07:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>有很多网站经常可以发现弹出的窗口允许用户进行鼠标拖拽移动，一般像登录窗口、通知或提示窗口等等，下面来分享一下实现的原理。</p>
<a id="more"></a>
<h2 id="首先HTML-CSS部分"><a href="#首先HTML-CSS部分" class="headerlink" title="首先HTML+CSS部分"></a>首先HTML+CSS部分</h2><blockquote>
<p>想要实现元素拖拽能移动，首先这个元素必须使用定位进行布局。</p>
</blockquote>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>假设有以一下HTML布局。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>对应CSS部分如下。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">			</div><div class="line"><span class="selector-id">#box</span> <span class="selector-id">#div1</span> &#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#FF0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到div1元素是相对于box元素进行定位的。实际上也可以不需要box这个元素，使div1元素相对于body进行定位也行。<br>不管box元素还是body都是为了给div1提供参照。这个参照的作用是在用户进行鼠标拖拽的时候来阻止div1元素被拖出这个参照元素。从而提高用户体验。</p>
</blockquote>
<h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><blockquote>
<p>这你需要用到知识主要是鼠标事件，鼠标按下onmousedown，鼠标移动onmousemove，鼠标松开onmouseup。这三事件的执行顺序不说大家肯定也知道了。</p>
</blockquote>
<ol>
<li>按下鼠标（鼠标左键没有松开）。</li>
<li>鼠标移动。</li>
<li>松开鼠标左键。</li>
</ol>
<p>注意以上三个事件是相互嵌套关系，如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//鼠标按下</span></div><div class="line">div1.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//鼠标移动</span></div><div class="line">	<span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">		<span class="comment">//鼠标松开</span></div><div class="line">		<span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"> 	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>根据以上的步骤整个拖拽过程结束。下面来拆解每个事件的实现方法。</p>
</blockquote>
<h3 id="按下鼠标"><a href="#按下鼠标" class="headerlink" title="按下鼠标"></a>按下鼠标</h3><p>首先需要把div1好box两个的节点获取到，同时创建两个变量用于存储鼠标的坐标。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>),</div><div class="line">	box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),</div><div class="line">	divX = <span class="number">0</span>,</div><div class="line">	divY = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>接着是个div1绑定点击事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">div1.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> oEvnet = ev || event;</div><div class="line">	divX = oEvnet.clientX - div1.offsetLeft;</div><div class="line">	divY = oEvnet.clientY - div1.offsetTop;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中函数传入的参数ev是为了解决浏览器兼容问题。client方法是鼠标当前的坐标位置。把当前鼠标位置减去div1元素位置，把结果赋值个divX和divY变量。</p>
<blockquote>
<p>到这里整个按下鼠标的事件处理完毕。</p>
</blockquote>
<h3 id="鼠标移动"><a href="#鼠标移动" class="headerlink" title="鼠标移动"></a>鼠标移动</h3><p>为了解决兼容问题，这个给document直接绑定事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> oEvnet = ev || event,</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> l = oEvnet.clientX - divX,</div><div class="line">		t = oEvnet.clientY - divY;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>鼠标移动之后鼠标的实际坐标肯定会和前面按下的坐标不一样，所以需要把移动时的坐标减去按下的坐标。的l好t两变量。这个两个变量分别存储div1元素的left好top值。</p>
<p>最后移动鼠标事件如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> oEvnet = ev || event,</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> l = oEvnet.clientX - divX,</div><div class="line">		t = oEvnet.clientY - divY;</div><div class="line">		</div><div class="line">	div1.style.left = l + <span class="string">'px'</span>;</div><div class="line">	div1.style.top = t + <span class="string">'px'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>到这里div1元素已经可以跟着鼠标进行拖拽移动。但是鼠标松开之后发现还会跟着鼠标移动，为什么呢？接着看下面。</p>
</blockquote>
<h3 id="鼠标松开"><a href="#鼠标松开" class="headerlink" title="鼠标松开"></a>鼠标松开</h3><p>因为鼠标松开是表示正个拖拽过程需要结束，所以需要清除事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//清查鼠标移动</span></div><div class="line">	<span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">	<span class="comment">//为了保险起见把按下事件同样清除</span></div><div class="line">	<span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>到这个拖拽功能基本完毕，但发现div1元素可以被拖出box区域。所以还需要限制div1不能拖出指定区域。</p>
</blockquote>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="限制拖拽区域"><a href="#限制拖拽区域" class="headerlink" title="限制拖拽区域"></a>限制拖拽区域</h3><p>限制拖拽区域，只需要对鼠标移动事件加以控制即可，完成效果如下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oEvnet = ev || event,</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> l = oEvnet.clientX - divX,</div><div class="line">        t = oEvnet.clientY - divY;</div><div class="line">        </div><div class="line">   <span class="comment">//防止元素被移除窗口可视区域，所以需要判断移动距离</span></div><div class="line">	<span class="keyword">if</span>(l &lt; <span class="number">0</span>) &#123;</div><div class="line">		l = <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; box.clientWidth - div1.offsetWidth) &#123;</div><div class="line">		l = box.clientWidth - div1.offsetWidth;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(t &lt; <span class="number">0</span>) &#123;</div><div class="line">		t = <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(t &gt; box.clientHeight - obj.offsetHeight) &#123;</div><div class="line">		t = box.clientHeight - div1.offsetHeight;</div><div class="line">	&#125;</div><div class="line">        </div><div class="line">    div1.style.left = l + <span class="string">'px'</span>;</div><div class="line">    div1.style.top = t + <span class="string">'px'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上已经完成拖拽限制。</p>
</blockquote>
<h3 id="方法封装"><a href="#方法封装" class="headerlink" title="方法封装"></a>方法封装</h3><p>一个经常可以用到的代码我们可以封装成函数，方便一会继续使用它，下面，对这个拖拽移动方法进行函数封装。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//obj需要拖拽的元素</span></div><div class="line"><span class="comment">//parent被拖拽元素的父级,用于现在拖出父级区域</span></div><div class="line"><span class="comment">//adsorption边缘自动吸附，传入一个数字，如果不传参数表示不自动吸附</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDrag</span>(<span class="params">obj, parent, adsorption</span>) </span>&#123;</div><div class="line">        <span class="comment">//定义元素的X，Y轴的位置</span></div><div class="line">        <span class="keyword">var</span> objX = <span class="number">0</span>,</div><div class="line">        objY = <span class="number">0</span>;</div><div class="line">        <span class="comment">//吸附值判断</span></div><div class="line">        <span class="keyword">if</span> (adsorption == <span class="literal">undefined</span>) &#123;</div><div class="line">                adsorption = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//鼠标按下</span></div><div class="line">        obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> oEvnet = ev || event;</div><div class="line">                <span class="comment">//用鼠标按下的鼠标坐标减去元素的两边的距离得出元素坐标</span></div><div class="line">                objX = oEvnet.clientX - obj.offsetLeft;</div><div class="line">                objY = oEvnet.clientY - obj.offsetTop;</div><div class="line">                <span class="comment">//鼠标移动</span></div><div class="line">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">                        <span class="keyword">var</span> oEvnet = ev || event,</div><div class="line">                        <span class="comment">//鼠标移动距离减去上面按下鼠标得出的元素距离得出实际需要移动的距离</span></div><div class="line">                        <span class="keyword">var</span> l = oEvnet.clientX - objX,</div><div class="line">                        t = oEvnet.clientY - objY;</div><div class="line">                        <span class="comment">//防止元素被移除窗口可视区域，所以需要判断移动距离</span></div><div class="line">                        <span class="keyword">if</span> (l &lt; adsorption) &#123;</div><div class="line">                                l = <span class="number">0</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; parent.clientWidth - obj.offsetWidth - adsorption) &#123;</div><div class="line">                                l = parent.clientWidth - obj.offsetWidth;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (t &lt; adsorption) &#123;</div><div class="line">                                t = <span class="number">0</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; parent.clientHeight - obj.offsetHeight - adsorption) &#123;</div><div class="line">                                t = parent.clientHeight - obj.offsetHeight;</div><div class="line">                        &#125;</div><div class="line">                        obj.style.left = l + <span class="string">'px'</span>;</div><div class="line">                        obj.style.top = t + <span class="string">'px'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//鼠标松开清除事件</span></div><div class="line">                <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">                        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>调用方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>),</div><div class="line">	box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line">	</div><div class="line">	setDrag(div, box, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>到这里整个方法完成。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有很多网站经常可以发现弹出的窗口允许用户进行鼠标拖拽移动，一般像登录窗口、通知或提示窗口等等，下面来分享一下实现的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="JavaScript" scheme="http://www.zyblog.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>让JavaScript的getElementsByClassName兼容iE8方法</title>
    <link href="http://www.zyblog.info/2016/09/08/js/"/>
    <id>http://www.zyblog.info/2016/09/08/js/</id>
    <published>2016-09-08T06:52:52.000Z</published>
    <updated>2016-09-08T07:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClassName</span>(<span class="params">ele, name</span>) </span>&#123;</div><div class="line">	<span class="comment">//先检测是否支持原生的getElementsByClassName</span></div><div class="line">	<span class="keyword">if</span>(ele.getElementsByClassName) &#123;</div><div class="line">		<span class="keyword">return</span> ele.getElementsByClassName(name);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">//如果不支持就通过getElementsByTagName匹配所有标签，默认在目标元素下查找</span></div><div class="line">		<span class="keyword">var</span> children = (ele || <span class="built_in">document</span>).getElementsByTagName(<span class="string">'*'</span>);</div><div class="line">		<span class="comment">//定义一个空数组，用于后续储存符合条件的元素</span></div><div class="line">		<span class="keyword">var</span> elements = [];</div><div class="line">		<span class="comment">//第一次通过byTagName循环遍历目标元素下的所有元素</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</div><div class="line">			<span class="keyword">var</span> child = children[i];</div><div class="line">			<span class="comment">//通过空格分隔元素的class名称</span></div><div class="line">			<span class="keyword">var</span> classNames = child.className.split(<span class="string">''</span>);</div><div class="line">			<span class="comment">//再次循环遍历元素的className</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; classNames.length; j++) &#123;</div><div class="line">				<span class="comment">//类名和传入的class相同时，通过push推到之前新建的空数组里</span></div><div class="line">				<span class="keyword">if</span>(classNames[j] === name) &#123;</div><div class="line">					elements.push(child);</div><div class="line">					<span class="comment">//找到后就跳出循环</span></div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//最后返回数组</span></div><div class="line">		<span class="keyword">return</span> elements;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>使用方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list=<span class="built_in">document</span>.getElementById(<span class="string">'list'</span>),</div><div class="line">	listS=list.getElementsByClassName(list,<span class="string">'list-s'</span>);</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>getElementsByClassName传入的两个参数，</li>
</ul>
<ol>
<li>第一个参数为id节点</li>
<li>第二个参数为这个id节点下面的子孙class节点。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ele, name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//先检测是否支持原生的getElementsByClassName&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ele.getElementsByClassName) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ele.getElementsByClassName(name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//如果不支持就通过getElementsByTagName匹配所有标签，默认在目标元素下查找&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; children = (ele || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//定义一个空数组，用于后续储存符合条件的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elements = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//第一次通过byTagName循环遍历目标元素下的所有元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; children.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child = children[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//通过空格分隔元素的class名称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; classNames = child.className.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//再次循环遍历元素的className&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; classNames.length; j++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;//类名和传入的class相同时，通过push推到之前新建的空数组里&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(classNames[j] === name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					elements.push(child);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;//找到后就跳出循环&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//最后返回数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; elements;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="JavaScript" scheme="http://www.zyblog.info/tags/JavaScript/"/>
    
      <category term="JS兼容" scheme="http://www.zyblog.info/tags/JS%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>前端团队协同开发CSS规范制定</title>
    <link href="http://www.zyblog.info/2016/08/28/cas/"/>
    <id>http://www.zyblog.info/2016/08/28/cas/</id>
    <published>2016-08-28T10:51:11.000Z</published>
    <updated>2016-09-07T09:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己来总结一下前端开发中关于CSS部分的团队开发规范。</p>
<a id="more"></a>
<h3 id="文件规范"><a href="#文件规范" class="headerlink" title="文件规范"></a>文件规范</h3><blockquote>
<p>文件分类</p>
</blockquote>
<ul>
<li>通用类文件按照不同的类别创建不同的文件夹放置相应的文件</li>
<li>业务类文件按照不同的业务创建不同的文件夹放置相应的文件</li>
</ul>
<blockquote>
<p>文件引入</p>
</blockquote>
<ul>
<li>除非万不得已，否则不用行内样式</li>
<li>外联使用<link>引入css文件，不用@import引入</li>
<li>内联使用<style></style>引入</li>
<li>文件本身：文件名由小写字母和中划线组成</li>
<li>编码统一 utf-8</li>
</ul>
<h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><blockquote>
<p>块状注释</p>
</blockquote>
<ul>
<li>写在被注释对象上面，统一缩进2个</li>
</ul>
<blockquote>
<p>单行注释</p>
</blockquote>
<ul>
<li>写在被注释对象上面，文字两端留空格</li>
</ul>
<blockquote>
<p>行内注释</p>
</blockquote>
<ul>
<li>写在分号之后，文字两端留空格</li>
</ul>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><blockquote>
<p>分类命名</p>
</blockquote>
<ul>
<li>布局相关类用g-*开头</li>
<li>模块相关类用m-*开头</li>
</ul>
<blockquote>
<p>命名格式</p>
</blockquote>
<ul>
<li>统一小写，长度权衡可读性和长度</li>
</ul>
<blockquote>
<p>语义化命名</p>
</blockquote>
<ul>
<li>以内容的语义命名</li>
</ul>
<h3 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h3><blockquote>
<p>单行和多行</p>
</blockquote>
<ul>
<li>统一使用多行书写</li>
</ul>
<blockquote>
<p>空格与分号</p>
</blockquote>
<ul>
<li>缩进用两个空格，保留css规则内空格</li>
<li>保留最后一个属性值的分号</li>
</ul>
<h3 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h3><blockquote>
<p>根据属性的重要性按顺序书写</p>
</blockquote>
<ol>
<li>显示属性</li>
<li>自身属性</li>
<li>文本属性和其他修饰</li>
</ol>
<h3 id="Hack方式"><a href="#Hack方式" class="headerlink" title="Hack方式"></a>Hack方式</h3><blockquote>
<p>IE6、IE7统一的Hack方式</p>
</blockquote>
<ul>
<li>IE6: _property:value;</li>
<li>IE7/IE6:*property:value;</li>
<li>尽量不使用Hack</li>
</ul>
<h3 id="值格式"><a href="#值格式" class="headerlink" title="值格式"></a>值格式</h3><blockquote>
<p>统一属性值</p>
</blockquote>
<ul>
<li>color值统一写#fff格式</li>
<li>url值:统一用双引号“”</li>
</ul>
<h3 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h3><blockquote>
<p>文件的名称</p>
</blockquote>
<ul>
<li>使用语义命名，长度要适中</li>
<li>保留源文件</li>
</ul>
<blockquote>
<p>图片合并</p>
</blockquote>
<ul>
<li>使用sprite技术合并图片时，按照模块、业务、页面划分</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己来总结一下前端开发中关于CSS部分的团队开发规范。&lt;/p&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="前端规范" scheme="http://www.zyblog.info/tags/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
      <category term="CSS" scheme="http://www.zyblog.info/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>用于li列表和表格排序的封装</title>
    <link href="http://www.zyblog.info/2016/08/26/js/"/>
    <id>http://www.zyblog.info/2016/08/26/js/</id>
    <published>2016-08-26T15:59:05.000Z</published>
    <updated>2016-09-07T09:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的学习排序所以学着封装了一个setSrot对象，分别对列表和表格进行排序。</p>
<a id="more"></a>
<h3 id="先来看看使用方法和说明"><a href="#先来看看使用方法和说明" class="headerlink" title="先来看看使用方法和说明"></a>先来看看使用方法和说明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * setSort函数排序使用方法</div><div class="line"> * 两个方法li() tab()</div><div class="line"> * 参数均是字符串类型</div><div class="line"> * </div><div class="line"> * li()</div><div class="line"> * 主要参数</div><div class="line"> * id---排序元素父级id</div><div class="line"> * ele---根据什么排序	传入class名</div><div class="line"> * 可选参数</div><div class="line"> * sort---排序类型 不带默认为升序 带这个参数为降序</div><div class="line"> * </div><div class="line"> * tab()</div><div class="line"> * 主要参数</div><div class="line"> * tabId---table的id</div><div class="line"> * index---td哪个下标为参照	 </div><div class="line"> * 可选参数</div><div class="line"> * sort---排序类型 不带默认为升序 带这个参数为降序</div><div class="line"> * </div><div class="line"> * v.1.00</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="实行逻辑"><a href="#实行逻辑" class="headerlink" title="实行逻辑"></a>实行逻辑</h3><h4 id="li-方法"><a href="#li-方法" class="headerlink" title="li()方法"></a>li()方法</h4><ul>
<li>这里主要是把class节点集合，遍历到一个空数组中去，因为的排序的时候真正排的arr这个数组。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">li: <span class="function"><span class="keyword">function</span>(<span class="params">id,ele,sort</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> id = <span class="built_in">document</span>.getElementById(id),</div><div class="line">			ele1 = id.getElementsByClassName(ele),	<span class="comment">//根据什么排序</span></div><div class="line">			arr = [];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ele1.length; i++) &#123;</div><div class="line">			<span class="comment">//遍历到数组中</span></div><div class="line">			arr[i] = id.getElementsByClassName(ele)[i];</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<ul>
<li>接下来才是对arr进行排序。排序中通过判断是否有传入sort这一个参数来判断排序类型。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//排序数组</span></div><div class="line"><span class="comment">//排序类型判断</span></div><div class="line"><span class="keyword">if</span>(sort == <span class="string">'sort'</span>) &#123;</div><div class="line">	<span class="comment">//降序</span></div><div class="line">	arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.innerHTML),</div><div class="line">			b1 = <span class="built_in">parseInt</span>(b.innerHTML);</div><div class="line">		<span class="keyword">return</span> b1 - a1;</div><div class="line">	&#125;);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//升序</span></div><div class="line">	arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.innerHTML),</div><div class="line">			b1 = <span class="built_in">parseInt</span>(b.innerHTML);</div><div class="line">		<span class="keyword">return</span> a1 - b1;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后对已经进行排序的arr在进行循环遍历。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//把排序好的数组重新插入</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">		id.appendChild(arr[i].parentNode);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>这里需要注意的是排序的元素往往id这个元素的子节点，所以这你用到了parentNode方法，来查找父级节点。下面用一段html说明一下。拿span元素作为参照，实际上我们想对整个li元素进行排序。所以用parentNode方法来解决。这个方法感觉不太好，但是目前只想到这种方法。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>109<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>223<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="tab"><a href="#tab" class="headerlink" title="tab()"></a>tab()</h4><ul>
<li>tab()的实行逻辑和li()是一样的，唯一不一样的是元素的获取方法不一样，使用了table专有的获取方式。下面来说说这些专有方式。</li>
</ul>
<blockquote>
<h5 id="tBodies方法"><a href="#tBodies方法" class="headerlink" title="tBodies方法"></a>tBodies方法</h5><p>此方法用来直接获取table的tbody元素</p>
<h5 id="rows方法"><a href="#rows方法" class="headerlink" title="rows方法"></a>rows方法</h5><p>此方法用来直接获取table的tr元素</p>
<h5 id="cells方法"><a href="#cells方法" class="headerlink" title="cells方法"></a>cells方法</h5><p>此方法用来直接获取tr的td元素</p>
</blockquote>
<ul>
<li>以下两段代码分别使用了上面的三种方法。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span>	tr = tabId.tBodies[<span class="number">0</span>].rows；</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//降序</span></div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.cells[index].innerHTML),</div><div class="line">		b1 = <span class="built_in">parseInt</span>(b.cells[index].innerHTML);</div><div class="line">	<span class="keyword">return</span> b1 - a1;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li>直接看代码吧</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">liBnt1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setSort.li(<span class="string">'ul'</span>, <span class="string">'span'</span>); <span class="comment">//升序</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">liBnt2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setSort.li(<span class="string">'ul'</span>, <span class="string">'span'</span>, <span class="string">'sort'</span>); <span class="comment">//降序</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="完整demo"><a href="#完整demo" class="headerlink" title="完整demo"></a>完整demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM-排序高级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * setSort函数排序使用方法</div><div class="line">			 * 两个方法li() tab()</div><div class="line">			 * 参数均是字符串类型</div><div class="line">			 * </div><div class="line">			 * li()</div><div class="line">			 * 主要参数</div><div class="line">			 * id---排序元素父级id</div><div class="line">			 * ele---根据什么排序	传入class名</div><div class="line">			 * 可选参数</div><div class="line">			 * sort---排序类型 不带默认为升序 带这个参数为降序</div><div class="line">			 * </div><div class="line">			 * tab()</div><div class="line">			 * 主要参数</div><div class="line">			 * tabId---table的id</div><div class="line">			 * index---td哪个下标为参照	 </div><div class="line">			 * 可选参数</div><div class="line">			 * sort---排序类型 不带默认为升序 带这个参数为降序</div><div class="line">			 * </div><div class="line">			 * v.1.00</div><div class="line">			 */</div><div class="line"></div><div class="line">			<span class="keyword">var</span> setSort = &#123;</div><div class="line">				li: <span class="function"><span class="keyword">function</span>(<span class="params">id, ele, sort</span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> id = <span class="built_in">document</span>.getElementById(id),</div><div class="line">						ele1 = id.getElementsByClassName(ele), <span class="comment">//根据什么排序</span></div><div class="line">						arr = [];</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ele1.length; i++) &#123;</div><div class="line">						<span class="comment">//遍历到数组中</span></div><div class="line">						arr[i] = id.getElementsByClassName(ele)[i];</div><div class="line">					&#125;</div><div class="line">					<span class="comment">//排序数组</span></div><div class="line">					<span class="comment">//排序类型判断</span></div><div class="line">					<span class="keyword">if</span>(sort == <span class="string">'sort'</span>) &#123;</div><div class="line">						<span class="comment">//降序</span></div><div class="line">						arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">							<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.innerHTML),</div><div class="line">								b1 = <span class="built_in">parseInt</span>(b.innerHTML);</div><div class="line">							<span class="keyword">return</span> b1 - a1;</div><div class="line">						&#125;);</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						<span class="comment">//升序</span></div><div class="line">						arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">							<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.innerHTML),</div><div class="line">								b1 = <span class="built_in">parseInt</span>(b.innerHTML);</div><div class="line">							<span class="keyword">return</span> a1 - b1;</div><div class="line">						&#125;);</div><div class="line">					&#125;</div><div class="line">					<span class="comment">//把排序好的数组重新插入</span></div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">						id.appendChild(arr[i].parentNode);</div><div class="line">					&#125;</div><div class="line">				&#125;,</div><div class="line">				tab: <span class="function"><span class="keyword">function</span>(<span class="params">tabId, index, sort</span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> tabId = <span class="built_in">document</span>.getElementById(tabId),</div><div class="line">						tr = tabId.tBodies[<span class="number">0</span>].rows, <span class="comment">//需要排的元素</span></div><div class="line">						arr = [];</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tr.length; i++) &#123;</div><div class="line">						arr[i] = tr[i];</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span>(sort == <span class="string">'sort'</span>) &#123;</div><div class="line">						<span class="comment">//降序</span></div><div class="line">						arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">							<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.cells[index].innerHTML),</div><div class="line">								b1 = <span class="built_in">parseInt</span>(b.cells[index].innerHTML);</div><div class="line">							<span class="keyword">return</span> b1 - a1;</div><div class="line">						&#125;)</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						<span class="comment">//升序</span></div><div class="line">						arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">							<span class="keyword">var</span> a1 = <span class="built_in">parseInt</span>(a.cells[index].innerHTML),</div><div class="line">								b1 = <span class="built_in">parseInt</span>(b.cells[index].innerHTML);</div><div class="line">							<span class="keyword">return</span> a1 - b1;</div><div class="line">						&#125;)</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">						tabId.tBodies[<span class="number">0</span>].appendChild(arr[i]);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"liBtn1"</span> <span class="attr">value</span>=<span class="string">"升序"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"liBtn2"</span> <span class="attr">value</span>=<span class="string">"降序"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span>阅读量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span>阅读量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span>阅读量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span>阅读量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>928<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span>阅读量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"span"</span>&gt;</span>218<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"年龄升序"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"年龄降序"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"otab"</span> <span class="attr">border</span>=<span class="string">""</span> <span class="attr">cellspacing</span>=<span class="string">""</span> <span class="attr">cellpadding</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 400px;"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line"></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>29<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="comment">/*li的排序方法*/</span></div><div class="line">			<span class="keyword">var</span> liBnt1 = <span class="built_in">document</span>.getElementById(<span class="string">'liBtn1'</span>),</div><div class="line">				liBnt2 = <span class="built_in">document</span>.getElementById(<span class="string">'liBtn2'</span>),</div><div class="line">				bnt1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>),</div><div class="line">				bnt2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</div><div class="line">			liBnt1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				setSort.li(<span class="string">'ul'</span>, <span class="string">'span'</span>); <span class="comment">//升序</span></div><div class="line">			&#125;</div><div class="line">			liBnt2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				setSort.li(<span class="string">'ul'</span>, <span class="string">'span'</span>, <span class="string">'sort'</span>); <span class="comment">//降序</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			bnt1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				setSort.tab(<span class="string">'otab'</span>, <span class="string">'2'</span>); <span class="comment">//升序</span></div><div class="line">			&#125;</div><div class="line">			bnt2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				setSort.tab(<span class="string">'otab'</span>, <span class="string">'2'</span>, <span class="string">'sort'</span>); <span class="comment">//降序</span></div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的学习排序所以学着封装了一个setSrot对象，分别对列表和表格进行排序。&lt;/p&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="JavaScript" scheme="http://www.zyblog.info/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub+Hexo搭建纯静态Blog网站（搭建篇）</title>
    <link href="http://www.zyblog.info/2016/08/16/github-hexo/"/>
    <id>http://www.zyblog.info/2016/08/16/github-hexo/</id>
    <published>2016-08-16T07:25:51.000Z</published>
    <updated>2016-09-07T09:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从接触前端以来，心中有一个想法要搭建一个自己的独立博客。之前尝试wordpress，自己试用一段时间，功能虽然很强大，插件也很丰富，但是感觉不是自己想要的。后来刷知乎的时候发现hexo，不需要数据库也不需要服务器，而且使用起来简单主题美，最主要是湾湾同胞开发。</p>
<a id="more"></a>
<h2 id="下面就开始说说搭建的过程"><a href="#下面就开始说说搭建的过程" class="headerlink" title="下面就开始说说搭建的过程"></a>下面就开始说说搭建的过程</h2><blockquote>
<p>需要你准备的内容如下</p>
<ul>
<li>代码托管<a href="https://github.com/" target="_blank" rel="external"> github</a></li>
<li>一台电脑（win mac）系统均可以</li>
<li>电脑需要安装<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a> 及<a href="https://git-scm.com/" target="_blank" rel="external">git工具</a> 这两工具的安装方式见链接</li>
</ul>
</blockquote>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul>
<li><a href="https://github.com/join?source=header-home" target="_blank" rel="external"> github账号注册</a> 这个我就不说了很简单的。</li>
</ul>
<ul>
<li>github新建仓库，注册之后进行登录，新建仓库方法如图<br><img src="http://i2.buimg.com/4851/bd8c3bbd8e8476ed.png" alt="image"></li>
</ul>
<p>注意 XXX 是需要你自己取的名子</p>
<p><img src="http://i2.buimg.com/4851/e57ddcef3c5306bd.png" alt="image"></p>
<ul>
<li>对仓库建立gh-pages分支，注意所有代码都是部署到这个分支下面。<br><img src="http://i2.buimg.com/4851/2f01a644d1c2d275.png" alt="image"></li>
</ul>
<p>++到这里github仓库建立到这里结束++。</p>
<h3 id="开始安装hexo"><a href="#开始安装hexo" class="headerlink" title="开始安装hexo"></a>开始安装hexo</h3><p>开始之前我们先来简单说一下什么是<a href="http://note.youdao.com/" target="_blank" rel="external">hexo</a>,这里接用几张官网首页图片。<br><img src="http://i1.buimg.com/4851/3221d27b66c46674.png" alt="hexo"><br><img src="http://i1.buimg.com/4851/ddc49d6dc2289dbd.png" alt="hexo"></p>
<p>更多介绍请前往官网开<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">文档</a>。</p>
<p>所有必备(node git)的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<ul>
<li>在电脑端口打开命令行工具</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<ul>
<li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init hexo</div><div class="line">$ cd hexo</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>到这里hexo 安装就完成了。是不是很简单，后面需要就需要到hexo进行配置和部署。</p>
<h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><ul>
<li>请直接访问官网的 <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">配置说明</a></li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>新建文章 name为文件名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo n name</div></pre></td></tr></table></figure>
</li>
<li><p>编译网站 </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<ul>
<li>本地启动网站</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<ul>
<li>部署网站到github</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>更多命令请参考这里<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/commands.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从接触前端以来，心中有一个想法要搭建一个自己的独立博客。之前尝试wordpress，自己试用一段时间，功能虽然很强大，插件也很丰富，但是感觉不是自己想要的。后来刷知乎的时候发现hexo，不需要数据库也不需要服务器，而且使用起来简单主题美，最主要是湾湾同胞开发。&lt;/p&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="github" scheme="http://www.zyblog.info/tags/github/"/>
    
      <category term="hexo" scheme="http://www.zyblog.info/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>AJAX GET和POST请求方法封装</title>
    <link href="http://www.zyblog.info/2016/08/14/Ajaxgitandpost/"/>
    <id>http://www.zyblog.info/2016/08/14/Ajaxgitandpost/</id>
    <published>2016-08-14T10:15:58.000Z</published>
    <updated>2016-08-15T15:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax请求GET方法封装"><a href="#Ajax请求GET方法封装" class="headerlink" title="Ajax请求GET方法封装"></a>Ajax请求GET方法封装</h2><blockquote>
<p>首先理一下思路</p>
<ul>
<li>方法要实现三个参数</li>
</ul>
</blockquote>
<pre><code>- 请求资源 url
- 请求的查询参数 optons
- 请求的回调函数 callback 需要接收XHLHttpRequest对象的responseTex属性作为参数
</code></pre><a id="more"></a>
<blockquote>
<p>以下为封装方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AJAX 请求 GET 方法的封装</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, option, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> url = url +<span class="string">"?"</span> + serialize(option);</div><div class="line">    <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;<span class="number">300</span>) || xhr.status ===<span class="number">304</span>)&#123;</div><div class="line">                callback(xhr.responseText);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">"请求失败"</span> + xhr.status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.open(<span class="string">"get"</span>, usr, <span class="literal">true</span>);</div><div class="line">    xhr.send(<span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果查询参数是一个对象，将其转换为对应的字符串格式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> pairs = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data)&#123;</div><div class="line">        <span class="keyword">if</span> (!data.hasOwnProperty(name)) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data[name] === <span class="string">"function"</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">var</span> value =data[name].toString();</div><div class="line">        name = <span class="built_in">encodeURIComponent</span>(name); <span class="comment">// 将字符串编码为URI组件</span></div><div class="line">        value = <span class="built_in">encodeURIComponent</span>(value);</div><div class="line">        pairs.push(name + <span class="string">"="</span> + value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pairs.join(<span class="string">"&amp;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上两个函数都封装完毕</p>
<ul>
<li>使用方法举例</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">get(<span class="string">"/information"</span>, &#123;name: <span class="string">"netease"</span>, age: <span class="number">18</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Ajax请求POST方法的封装"><a href="#Ajax请求POST方法的封装" class="headerlink" title="Ajax请求POST方法的封装"></a>Ajax请求POST方法的封装</h3><blockquote>
<p>思路和GET是一样的</p>
<p>下面直接进行封装</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, options, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> url = url +<span class="string">"?"</span> + serialize(option);</div><div class="line">    <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status ===<span class="number">304</span>)&#123;</div><div class="line">                callback(xhr.responsetText);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">"请求失败"</span> + xhr.status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.open(<span class="string">"post"</span>, url, <span class="literal">true</span>);</div><div class="line">     <span class="comment">//已表单形式提交</span></div><div class="line">    xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    xhr.send(serialize(options));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用举例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">post(<span class="string">'/addUser'</span>, &#123;name: <span class="string">'jerry'</span>, age: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">// 处理返回数据</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax请求GET方法封装&quot;&gt;&lt;a href=&quot;#Ajax请求GET方法封装&quot; class=&quot;headerlink&quot; title=&quot;Ajax请求GET方法封装&quot;&gt;&lt;/a&gt;Ajax请求GET方法封装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先理一下思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法要实现三个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;- 请求资源 url
- 请求的查询参数 optons
- 请求的回调函数 callback 需要接收XHLHttpRequest对象的responseTex属性作为参数
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.zyblog.info/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://www.zyblog.info/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://www.zyblog.info/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>科学上网带你去看看外面的世界</title>
    <link href="http://www.zyblog.info/2016/08/14/SS-get/"/>
    <id>http://www.zyblog.info/2016/08/14/SS-get/</id>
    <published>2016-08-14T02:46:53.000Z</published>
    <updated>2016-09-07T09:27:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>外面的世界是一个提供 免费 安全 稳定 不限速 VPN账号，让你简单快速实现科学上网。以下是如何注册使用的VPN账号的教程。<br><a id="more"></a></p>
<h3 id="进入外面的世界"><a href="#进入外面的世界" class="headerlink" title="进入外面的世界"></a>进入外面的世界</h3><ul>
<li>外面的世界 <a href="http://ss.caowb.tk" target="_blank" rel="external">ss.caowb.tk</a>。 （打开如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/bc37e93b99b2f280.png" alt="Alt text"></p>
<h3 id="邀请码"><a href="#邀请码" class="headerlink" title="邀请码"></a>邀请码</h3><ul>
<li>点击右侧菜单下面的邀请码，目前只支持邀请码进行注册。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/494309a8198d87a5.jpg" alt="Alt text"></p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ul>
<li>填写注册信息进行注册。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/9757540e48498700.jpg" alt="Alt text"></p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul>
<li>在注册成功之后会跳转到首页，需要点击左边的登录按钮进行登录。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/4708858761f0b456.png" alt="Alt text"></p>
<h3 id="熟悉"><a href="#熟悉" class="headerlink" title="熟悉"></a>熟悉</h3><ul>
<li>登录成功之后来到后台主页，进行简单的了接和使用方法。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/e05842d9bf666340.png" alt="Alt text"></p>
<h3 id="点击节点列表"><a href="#点击节点列表" class="headerlink" title="点击节点列表"></a>点击节点列表</h3><ul>
<li>会看到目前能使用的节点。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/97043e496e01bcea.png" alt="Alt text"></p>
<h3 id="选择节点"><a href="#选择节点" class="headerlink" title="选择节点"></a>选择节点</h3><ul>
<li>节点的对应自己的账户信息。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/d3603e50f6b14fd8.png" alt="Alt text"></p>
<p>整个教程完毕，现在可以去外面的世界看看了！如有使用问题请联系本人。<br>如果你觉得这个网站不错不妨带上你的小伙伴一起飞。每位注册用户拥有5个延期码，你可以把邀请码发送给你的小伙伴，带着小伙伴一起飞，一起去外面的世界看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;外面的世界是一个提供 免费 安全 稳定 不限速 VPN账号，让你简单快速实现科学上网。以下是如何注册使用的VPN账号的教程。&lt;br&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="科学上网" scheme="http://www.zyblog.info/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>常用HTML标签分类图+快速手册</title>
    <link href="http://www.zyblog.info/2016/08/14/htmtlTag/"/>
    <id>http://www.zyblog.info/2016/08/14/htmtlTag/</id>
    <published>2016-08-13T16:35:42.000Z</published>
    <updated>2016-09-07T09:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>从开始自学HTML开始遇到了很多坑，也刷了很多教程。在学习的过程中对于标签的分类和使用都很难理解清楚。后来发了一张图。</p>
<a id="more"></a>
<p><img src="http://nos.netease.com/edu-image/E06A8D445FF610DCF566CE1CD267D32D.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="alt text" title="Title"></p>
<p>通过张图能清晰快速的掌握常用HTML的分类，同时学以致用连夜做成了一个样的页面，并且对每个标签都加上了使用方法，只要点击相应标签就能访问到对应的使用方法。</p>
<p>以下是我写的网页地址</p>
<p><a href="https://zhangyubushiyu.github.io/HTML-Tab-PDG/" target="_blank" rel="external">常用HTML标签分类图+快速手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从开始自学HTML开始遇到了很多坑，也刷了很多教程。在学习的过程中对于标签的分类和使用都很难理解清楚。后来发了一张图。&lt;/p&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/%E9%9A%8F%E6%89%8B%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="HTML" scheme="http://www.zyblog.info/tags/HTML/"/>
    
  </entry>
  
</feed>

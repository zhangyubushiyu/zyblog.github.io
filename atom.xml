<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>章鱼不是鱼</title>
  <subtitle>梦中醒来的章鱼，前往前端路途中！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zyblog.info/"/>
  <updated>2016-08-16T08:46:23.000Z</updated>
  <id>http://www.zyblog.info/</id>
  
  <author>
    <name>章鱼不是鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用GitHub+Hexo搭建纯静态Blog网站（搭建篇）</title>
    <link href="http://www.zyblog.info/2016/08/16/%E5%88%A9%E7%94%A8GitHub+Hexo%E6%90%AD%E5%BB%BA%E7%BA%AF%E9%9D%99%E6%80%81Blog%E7%BD%91%E7%AB%99%20%E6%90%AD%E5%BB%BA%E7%AF%87/"/>
    <id>http://www.zyblog.info/2016/08/16/利用GitHub+Hexo搭建纯静态Blog网站 搭建篇/</id>
    <published>2016-08-16T07:25:51.000Z</published>
    <updated>2016-08-16T08:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从接触前端以来，心中有一个想法要搭建一个自己的独立博客。之前尝试wordpress，自己试用一段时间，功能虽然很强大，插件也很丰富，但是感觉不是自己想要的。后来刷知乎的时候发现hexo，不需要数据库也不需要服务器，而且使用起来简单主题美，最主要是湾湾同胞开发。<br><a id="more"></a></p>
<h2 id="下面就开始说说搭建的过程"><a href="#下面就开始说说搭建的过程" class="headerlink" title="下面就开始说说搭建的过程"></a>下面就开始说说搭建的过程</h2><blockquote>
<p>需要你准备的内容如下</p>
<ul>
<li>代码托管<a href="https://github.com/" target="_blank" rel="external"> github</a></li>
<li>一台电脑（win mac）系统均可以</li>
<li>电脑需要安装<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a> 及<a href="https://git-scm.com/" target="_blank" rel="external">git工具</a> 这两工具的安装方式见链接</li>
</ul>
</blockquote>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul>
<li><a href="https://github.com/join?source=header-home" target="_blank" rel="external"> github账号注册</a> 这个我就不说了很简单的。</li>
</ul>
<ul>
<li>github新建仓库，注册之后进行登录，新建仓库方法如图<br><img src="http://i2.buimg.com/4851/bd8c3bbd8e8476ed.png" alt="image"></li>
</ul>
<p>注意 XXX 是需要你自己取的名子</p>
<p><img src="http://i2.buimg.com/4851/e57ddcef3c5306bd.png" alt="image"></p>
<ul>
<li>对仓库建立gh-pages分支，注意所有代码都是部署到这个分支下面。<br><img src="http://i2.buimg.com/4851/2f01a644d1c2d275.png" alt="image"></li>
</ul>
<p>++到这里github仓库建立到这里结束++。</p>
<h3 id="开始安装hexo"><a href="#开始安装hexo" class="headerlink" title="开始安装hexo"></a>开始安装hexo</h3><p>开始之前我们先来简单说一下什么是<a href="http://note.youdao.com/" target="_blank" rel="external">hexo</a>,这里接用几张官网首页图片。<br><img src="http://i1.buimg.com/4851/3221d27b66c46674.png" alt="hexo"><br><img src="http://i1.buimg.com/4851/ddc49d6dc2289dbd.png" alt="hexo"></p>
<p>更多介绍请前往官网开<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">文档</a>。</p>
<p>所有必备(node git)的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<ul>
<li>在电脑端口打开命令行工具</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<ul>
<li>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init hexo</div><div class="line">$ cd hexo</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>到这里hexo 安装就完成了。是不是很简单，后面需要就需要到hexo进行配置和部署。</p>
<h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><ul>
<li>请直接访问官网的 <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">配置说明</a></li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>新建文章 name为文件名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo n name</div></pre></td></tr></table></figure>
</li>
<li><p>编译网站 </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<ul>
<li>本地启动网站</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<ul>
<li>部署网站到github</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>更多命令请参考这里<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/commands.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从接触前端以来，心中有一个想法要搭建一个自己的独立博客。之前尝试wordpress，自己试用一段时间，功能虽然很强大，插件也很丰富，但是感觉不是自己想要的。后来刷知乎的时候发现hexo，不需要数据库也不需要服务器，而且使用起来简单主题美，最主要是湾湾同胞开发。&lt;br&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/share/"/>
    
    
      <category term="github" scheme="http://www.zyblog.info/tags/github/"/>
    
      <category term="hexo" scheme="http://www.zyblog.info/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>AJAX GET和POST请求方法封装</title>
    <link href="http://www.zyblog.info/2016/08/14/Ajaxgitandpost/"/>
    <id>http://www.zyblog.info/2016/08/14/Ajaxgitandpost/</id>
    <published>2016-08-14T10:15:58.000Z</published>
    <updated>2016-08-15T15:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax请求GET方法封装"><a href="#Ajax请求GET方法封装" class="headerlink" title="Ajax请求GET方法封装"></a>Ajax请求GET方法封装</h2><blockquote>
<p>首先理一下思路</p>
<ul>
<li>方法要实现三个参数</li>
</ul>
</blockquote>
<pre><code>- 请求资源 url
- 请求的查询参数 optons
- 请求的回调函数 callback 需要接收XHLHttpRequest对象的responseTex属性作为参数
</code></pre><a id="more"></a>
<blockquote>
<p>以下为封装方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AJAX 请求 GET 方法的封装</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, option, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> url = url +<span class="string">"?"</span> + serialize(option);</div><div class="line">    <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt;<span class="number">300</span>) || xhr.status ===<span class="number">304</span>)&#123;</div><div class="line">                callback(xhr.responseText);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">"请求失败"</span> + xhr.status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.open(<span class="string">"get"</span>, usr, <span class="literal">true</span>);</div><div class="line">    xhr.send(<span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果查询参数是一个对象，将其转换为对应的字符串格式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> pairs = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data)&#123;</div><div class="line">        <span class="keyword">if</span> (!data.hasOwnProperty(name)) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data[name] === <span class="string">"function"</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">var</span> value =data[name].toString();</div><div class="line">        name = <span class="built_in">encodeURIComponent</span>(name); <span class="comment">// 将字符串编码为URI组件</span></div><div class="line">        value = <span class="built_in">encodeURIComponent</span>(value);</div><div class="line">        pairs.push(name + <span class="string">"="</span> + value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pairs.join(<span class="string">"&amp;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以上两个函数都封装完毕</p>
<ul>
<li>使用方法举例</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">get(<span class="string">"/information"</span>, &#123;name: <span class="string">"netease"</span>, age: <span class="number">18</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Ajax请求POST方法的封装"><a href="#Ajax请求POST方法的封装" class="headerlink" title="Ajax请求POST方法的封装"></a>Ajax请求POST方法的封装</h3><blockquote>
<p>思路和GET是一样的</p>
<p>下面直接进行封装</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, options, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> url = url +<span class="string">"?"</span> + serialize(option);</div><div class="line">    <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status ===<span class="number">304</span>)&#123;</div><div class="line">                callback(xhr.responsetText);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">"请求失败"</span> + xhr.status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.open(<span class="string">"post"</span>, url, <span class="literal">true</span>);</div><div class="line">     <span class="comment">//已表单形式提交</span></div><div class="line">    xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    xhr.send(serialize(options));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用举例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">post(<span class="string">'/addUser'</span>, &#123;name: <span class="string">'jerry'</span>, age: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">// 处理返回数据</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax请求GET方法封装&quot;&gt;&lt;a href=&quot;#Ajax请求GET方法封装&quot; class=&quot;headerlink&quot; title=&quot;Ajax请求GET方法封装&quot;&gt;&lt;/a&gt;Ajax请求GET方法封装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先理一下思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法要实现三个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;- 请求资源 url
- 请求的查询参数 optons
- 请求的回调函数 callback 需要接收XHLHttpRequest对象的responseTex属性作为参数
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.zyblog.info/categories/notes/"/>
    
    
      <category term="JavaScript" scheme="http://www.zyblog.info/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://www.zyblog.info/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>科学上网带你去看看外面的世界</title>
    <link href="http://www.zyblog.info/2016/08/14/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B8%A6%E4%BD%A0%E5%8E%BB%E7%9C%8B%E7%9C%8B%E5%A4%96%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>http://www.zyblog.info/2016/08/14/科学上网带你去看看外面的世界/</id>
    <published>2016-08-14T02:46:53.000Z</published>
    <updated>2016-08-14T03:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>外面的世界是一个提供 免费 安全 稳定 不限速 VPN账号，让你简单快速实现科学上网。以下是如何注册使用的VPN账号的教程。<br><a id="more"></a></p>
<h3 id="进入外面的世界"><a href="#进入外面的世界" class="headerlink" title="进入外面的世界"></a>进入外面的世界</h3><ul>
<li>外面的世界 <a href="http://ss.caowb.tk" target="_blank" rel="external">ss.caowb.tk</a>。 （打开如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/bc37e93b99b2f280.png" alt="Alt text"></p>
<h3 id="邀请码"><a href="#邀请码" class="headerlink" title="邀请码"></a>邀请码</h3><ul>
<li>点击右侧菜单下面的邀请码，目前只支持邀请码进行注册。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/494309a8198d87a5.jpg" alt="Alt text"></p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ul>
<li>填写注册信息进行注册。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/9757540e48498700.jpg" alt="Alt text"></p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul>
<li>在注册成功之后会跳转到首页，需要点击左边的登录按钮进行登录。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/4708858761f0b456.png" alt="Alt text"></p>
<h3 id="熟悉"><a href="#熟悉" class="headerlink" title="熟悉"></a>熟悉</h3><ul>
<li>登录成功之后来到后台主页，进行简单的了接和使用方法。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/e05842d9bf666340.png" alt="Alt text"></p>
<h3 id="点击节点列表"><a href="#点击节点列表" class="headerlink" title="点击节点列表"></a>点击节点列表</h3><ul>
<li>会看到目前能使用的节点。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/97043e496e01bcea.png" alt="Alt text"></p>
<h3 id="选择节点"><a href="#选择节点" class="headerlink" title="选择节点"></a>选择节点</h3><ul>
<li>节点的对应自己的账户信息。（如下图）</li>
</ul>
<p><img src="http://i4.piimg.com/4851/d3603e50f6b14fd8.png" alt="Alt text"></p>
<p>整个教程完毕，现在可以去外面的世界看看了！如有使用问题请联系本人。<br>如果你觉得这个网站不错不妨带上你的小伙伴一起飞。每位注册用户拥有5个延期码，你可以把邀请码发送给你的小伙伴，带着小伙伴一起飞，一起去外面的世界看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;外面的世界是一个提供 免费 安全 稳定 不限速 VPN账号，让你简单快速实现科学上网。以下是如何注册使用的VPN账号的教程。&lt;br&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/share/"/>
    
    
      <category term="科学上网" scheme="http://www.zyblog.info/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>常用HTML标签分类图+快速手册</title>
    <link href="http://www.zyblog.info/2016/08/14/HtmlTag/"/>
    <id>http://www.zyblog.info/2016/08/14/HtmlTag/</id>
    <published>2016-08-13T16:35:42.000Z</published>
    <updated>2016-08-13T16:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>从开始自学HTML开始遇到了很多坑，也刷了很多教程。在学习的过程中对于标签的分类和使用都很难理解清楚。后来发了一张图。<br><a id="more"></a><br><img src="http://nos.netease.com/edu-image/E06A8D445FF610DCF566CE1CD267D32D.png?imageView&amp;thumbnail=520x520&amp;quality=100" alt="alt text" title="Title"></p>
<p>通过张图能清晰快速的掌握常用HTML的分类，同时学以致用连夜做成了一个样的页面，并且对每个标签都加上了使用方法，只要点击相应标签就能访问到对应的使用方法。</p>
<p>以下是我写的网页地址</p>
<p><a href="https://zhangyubushiyu.github.io/HTML-Tab-PDG/" target="_blank" rel="external">常用HTML标签分类图+快速手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从开始自学HTML开始遇到了很多坑，也刷了很多教程。在学习的过程中对于标签的分类和使用都很难理解清楚。后来发了一张图。&lt;br&gt;
    
    </summary>
    
      <category term="随手分享" scheme="http://www.zyblog.info/categories/share/"/>
    
    
      <category term="HTML" scheme="http://www.zyblog.info/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.zyblog.info/2016/08/13/hello-world/"/>
    <id>http://www.zyblog.info/2016/08/13/hello-world/</id>
    <published>2016-08-13T07:56:53.000Z</published>
    <updated>2016-08-13T16:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
